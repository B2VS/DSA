#include <stdio.h>
#include <stdlib.h>
typedef struct in
{
	int a,b;
}In;
typedef struct stack
{
	int top;
	int capacity;
	In* base;
}Stack;
Stack* createStack(int n)
{
	Stack* s = (Stack *)malloc(sizeof(Stack));
	s->top = -1;
	s->capacity = n;
	s->base = (In*)malloc(sizeof(In) * n);
	return s;
}
void push(Stack **st, In data)
{
	if((*st)->top!=(*st)->capacity)
	{
		(*st)->top+=1;
		((*st)->base[(*st)->top]).a = data.a;
		((*st)->base[(*st)->top]).b = data.b;
	}
	else
	{
		printf("Stack full");
		return;
	}
}
int pop(Stack **st)
{
	In temp;
	if((*st)->top == -1)
	{
		printf("Stack is empty. Cannot pop.");
		return -1;
	}
	else
	{
		temp.a = ((*st)->base[(*st)->top]).a;
		((*st)->top)--;
		return temp.a;
	}
	
}
int peek(Stack **st)
{
	In temp;
	if((*st)->top == -1)
	{
		printf("Stack is empty");
		return -1;
	}
	else
	{
		return ((*st)->base[(*st)->top]).a;
	}

}
void printStack(Stack **st)
{
	while(((*st)->top)!=-1)
	{
		printf("%d\n",pop(st));
	}
	printf("printed Stack");
}
int main()
{
	int n;
	scanf("%d",&n);
	Stack* s = createStack(n);
	int i,j;
	int count = 0;
	In temp;
	int ret = 0;
	for(i=0;i<n;++i)
	{
		scanf("%d",&temp.a);
		temp.b = 1;
		for(;s->top!=-1 && ((s)->base[(s)->top]).a <= temp.a;pop(&s))
		{	
			ret+= ((s)->base[(s)->top]).b;
			if(((s)->base[(s)->top]).a == temp.a)
			{
				temp.b+=((s)->base[(s)->top]).b;
			}
		}
		if(s->top!=-1)
		{
			++ret;
		}
		push(&s,temp);

	}
	printf("%d\n",ret);
}